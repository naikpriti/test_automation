name: Update IPs and Create Release

on:
  workflow_dispatch:
  schedule:
    - cron: "0 4 */2 * *"  

jobs:
  update-ips:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4
        pip install packaging

    - name: Install Terraform
      run: |
        sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get update && sudo apt-get install -y terraform

    - name: Run update script
      id: run_update_script
      run: |
        python -u automation_scripts/init.py 2>&1 | tee output.log
      env: 
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      continue-on-error: true
    
    - name: Upload output log
      uses: actions/upload-artifact@v4
      with:
          name: output-log
          path: output.log
    
    - name: Check if release created
      id: check_release
      run: |
        if grep -q "Release '" output.log; then
          echo "release_created=true" >> $GITHUB_OUTPUT
          echo "Release creation detected."
        else
          echo "release_created=false" >> $GITHUB_OUTPUT
          echo "No release creation detected."
        fi
      shell: bash

    outputs:
      release_created: ${{ steps.check_release.outputs.release_created }}

  notify:
    needs: update-ips
    runs-on: ubuntu-latest   # your private runner with SMTP access
    if: needs.update-ips.outputs.release_created == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download logs from previous job
        uses: actions/download-artifact@v4
        with:
          name: output-log
          path: .

      - name: Send test email through SMTP proxy
        run: |
          python automation_scripts/send_email.py "Test Release Notification" "This is a test email sent through SMTP proxy"
        env:
          SMTP_SERVER: ""
          SMTP_PORT: 25
          SMTP_USER: ""
          SMTP_TO: ""